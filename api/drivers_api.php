<?php
/*
Samsara API Drivers Class
*/

namespace samsara_php\api;

use samsara_php\config;

/**
 * Class drivers
 * @package samsara_php\api
 */
class drivers extends config {

    /**
     * Hold the class instance.
     *
     * @var null
     */
    private static $instance = null;

    private static $fleet_api;

    /**
     * __construct
     *
     * drivers constructor.
     */
    function __construct()
    {
        parent::__construct();

        // Pull in fleet_api for duplicate endpoints that fall under both fleet & assets api's to create a wrapper for existing methods
        $this::$fleet_api = \samsara_php\api\fleet::getInstance();
    }

    /**
     * driversAddDrivers
     *
     * endpoint: /fleet/drivers/create
     * Create a new driver.
     *
     * [PARAMETERS]
     *
     * Query Parameters
     *
     *      'access_token' | automatically included from config class
     *      string Required
     *      Samsara API access token.
     *
     * [REQUEST BODY] as $request_body with the following keys
     * Driver creation body
     *
     *      `password`
     *      string Required
     *      Driver's password for the driver app.
     *
     *      `tagIds`
     *      number <int64>
     *      A list of tag IDs.
     *
     *      `eldAdverseWeatherExemptionEnabled`
     *      boolean
     *      Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
     *
     *      `eldBigDayExemptionEnabled`
     *      boolean
     *      Flag indicating this driver may use Big Day excemptions in ELD logs.
     *
     *      `eldDayStartHour`
     *      integer
     *      0 indicating midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving hours.
     *
     *      `eldExempt`
     *      boolean
     *      Flag indicating this driver is exempt from the Electronic Logging Mandate.
     *
     *      `eldExemptReason`
     *      string
     *      Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
     *
     *      `eldPcEnabled`
     *      boolean
     *      false
     *      Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
     *
     *      `eldYmEnabled`
     *      boolean
     *      false
     *      Flag indicating this driver may select the Yard Move duty status in ELD logs.
     *
     *      `externalIds`
     *      externalIds
     *      Dictionary of external IDs (string key-value pairs)
     *
     *      `groupId`
     *      integer <int64>
     *      ID of the group if the organization has multiple groups (uncommon).
     *
     *      `licenseNumber`
     *      string
     *      Driver's state issued license number.
     *
     *      `licenseState`
     *      string
     *      Abbreviation of state that issued driver's license.
     *
     *      `name`
     *      string Required
     *      Driver's name.
     *
     *      `notes`
     *      string
     *      Notes about the driver.
     *
     *      `phone`
     *      string
     *      Driver's phone number. Please include only digits, ex. 4157771234
     *
     *      `username`
     *      string
     *      Driver's login username into the driver app.
     *
     *      `vehicleId`
     *      integer <int64>
     *      ID of the vehicle assigned to the driver for static vehicle assignments. (uncommon).
     *
     * @param array $request_body
     * @return bool|mixed
     */
    public function driversAddDrivers( array $request_body )
    {

        return $this::$fleet_api->fleetAddDrivers( $request_body );

    }

    /**
     * driversGetInactiveDrivers
     *
     * endpoint: /fleet/drivers/inactive
     * Fetch all deactivated drivers for the group.
     *
     * [PARAMETERS]
     *
     * Query Parameters
     *
     *      'access_token' | automatically included from config class
     *      string Required
     *      Samsara API access token.
     *
     *      `group_id`
     *      integer <int64>
     *      Optional group ID if the organization has multiple groups (uncommon).
     *
     * @param int|null $group_id
     * @return bool|mixed
     */
    public function driversGetInactiveDrivers(int $group_id = null )
    {

        return $this::$fleet_api->fleetGetInactiveDrivers( $group_id );

    }

    /**
     * driversGetInactiveDriverById
     *
     * endpoint: /fleet/drivers/inactive/{driver_id or external_id}
     * Fetch all deactivated drivers for the group.
     *
     * [PARAMETERS]
     *
     * Path Parameters
     *      `driver_id` or `external_id` as $id
     *      string [REQUIRED]
     *      ID of the driver. This must be either the numeric ID generated by Samsara or the external ID of the driver.
     *      Driver ID must contain only digits 0-9. External IDs are customer specified key-value pairs and must contain only alphanumeric characters.
     *
     * Query Parameters
     *
     *      'access_token' | automatically included from config class
     *      string Required
     *      Samsara API access token.
     *
     * @param int $id
     * @return bool|mixed
     */
    public function driversGetInactiveDriverById(int $id )
    {

        return $this::$fleet_api->fleetGetInactiveDriverById( $id );

    }

    /**
     * driversActivateInactiveDriverById
     *
     * endpoint: /fleet/drivers/inactive/{driver_id or external_id}
     * Reactivate the inactive driver having id.
     *
     * [PARAMETERS]
     *
     * Path Parameters
     *      `driver_id` or `external_id` as $id
     *      string [REQUIRED]
     *      ID of the driver. This must be either the numeric ID generated by Samsara or the external ID of the driver.
     *      Driver ID must contain only digits 0-9. External IDs are customer specified key-value pairs and must contain only alphanumeric characters.
     *
     * Query Parameters
     *
     *      'access_token' | automatically included from config class.
     *      string [REQUIRED]
     *      Samsara API access token.
     *
     * [REQUEST BODY] | automatically included.
     *
     * Driver reactivation body
     *
     *      'reactivate'
     *      boolean [REQUIRED]
     *      True indicates that this driver should be reactivated.
     *
     * @param int $id
     * @return bool|mixed
     */
    public function driversActivateInactiveDriverById( int $id )
    {

        return $this::$fleet_api->fleetActivateInactiveDriverById( $id );

    }

    /**
     * driversGetDriverById
     *
     * endpoint: /fleet/drivers/{driver_id or external_id}
     * Fetch driver by id.
     *
     * [PARAMETERS]
     *
     * Path Parameters
     *
     *      'driverId' as $id
     *      integer <int64> Required
     *      ID of the driver. This must be either the numeric ID generated by Samsara or the external ID of the driver.
     *      Driver ID must contain only digits 0-9. External IDs are customer specified key-value pairs and must contain only alphanumeric characters.
     *
     * Query Parameters
     *
     *      'access_token' | automatically included from config class.
     *      string [REQUIRED]
     *      Samsara API access token.
     *
     * @param int $id
     * @return bool|mixed
     */
    public function driversGetDriverById( int $id )
    {

        return $this::$fleet_api->fleetGetDriverById( $id );

    }

    /**
     * driversUpdateDriverById
     *
     * endpoint: /fleet/drivers/{driver_id or external_id}
     * Update a driver by id or by external id
     *
     * [PARAMETERS]
     *
     * Path Parameters
     *
     *      'driverId' as $id
     *      integer <int64> Required
     *      ID of the driver. This must be either the numeric ID generated by Samsara or the external ID of the driver.
     *      Driver ID must contain only digits 0-9. External IDs are customer specified key-value pairs and must contain only alphanumeric characters.
     *
     * Query Parameters
     *
     *      'access_token' | automatically included from config class.
     *      string [REQUIRED]
     *      Samsara API access token.
     *
     * [REQUEST BODY] as $request_body with the following keys
     *
     * Driver update body
     *
     *      'tagIds '
     *      number <int64>
     *      A list of tag IDs.
     *
     *      'eldAdverseWeatherExemptionEnabled'
     *      boolean
     *      Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
     *
     *      'eldBigDayExemptionEnabled'
     *      boolean
     *      Flag indicating this driver may use Big Day excemptions in ELD logs.
     *
     *      'eldDayStartHour'
     *      integer
     *      0 indicating midnight-to-midnight ELD driving hours, 12 to indicate noon-to-noon driving hours.
     *
     *      'eldExempt'
     *      boolean
     *      Flag indicating this driver is exempt from the Electronic Logging Mandate.
     *
     *      'eldExemptReason'
     *      string
     *      Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
     *
     *      'eldPcEnabled'
     *      boolean
     *      false
     *      Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
     *
     *      'eldYmEnabled'
     *      boolean
     *      false
     *      Flag indicating this driver may select the Yard Move duty status in ELD logs.
     *
     *      'externalIds'
     *      externalIds
     *      Dictionary of external IDs (string key-value pairs)
     *
     *      'groupId'
     *      integer <int64>
     *      ID of the group if the organization has multiple groups (uncommon).
     *
     *      'licenseNumber'
     *      string
     *      Driver's state issued license number.
     *
     *      'licenseState'
     *      string
     *      Abbreviation of state that issued driver's license.
     *
     *      'name'
     *      string Required
     *      Driver's name.
     *
     *      'notes'
     *      string
     *      Notes about the driver.
     *
     *      'phone'
     *      string
     *      Driver's phone number. Please include only digits, ex. 4157771234
     *
     *      'username'
     *      string
     *      Driver's login username into the driver app.
     *
     *      'vehicleId'
     *      integer <int64>
     *      ID of the vehicle assigned to the driver for static vehicle assignments. (uncommon).
     *
     * @param int $id
     * @param array $request_body
     * @return bool|mixed
     */
    public function driversUpdateDriverById(int $id, array $request_body )
    {

        return $this::$fleet_api->fleetUpdateDriverById( $id, $request_body );

    }

    /**
     * driversDeactivateDriverById
     *
     * endpoint: /fleet/drivers/{driver_id or external_id}
     * Deactivate a driver with the given id.
     *
     * [PARAMETERS]
     *
     * Path Parameters
     *
     *      'driverId' as $id
     *      integer <int64> Required
     *      ID of the driver. This must be either the numeric ID generated by Samsara or the external ID of the driver.
     *      Driver ID must contain only digits 0-9. External IDs are customer specified key-value pairs and must contain only alphanumeric characters.
     *
     * Query Parameters
     *
     *      'access_token' | automatically included from config class.
     *      string [REQUIRED]
     *      Samsara API access token.
     *
     * @param int $id
     * @return bool|mixed
     */
    public function driversDeactivateDriverById( int $id )
    {

        return $this::$fleet_api->fleetDeactivateDriverById( $id );

    }

    /**
     * getInstance
     *
     * The object is created from within the class itself
     * only if the class has no instance.
     *
     * @return null|drivers
     */
    public static function getInstance()
    {
        if (self::$instance == null)
        {
            self::$instance = new drivers();
        }

        return self::$instance;
    }

}